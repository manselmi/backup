#!/usr/bin/env -S -- zsh -f
# vim: set ft=zsh :

# Stop at any error, treat unset vars as errors and make pipelines exit with a non-zero exit code if
# any command in the pipeline exits with a non-zero exit code.
set -o ERR_EXIT
set -o NO_UNSET
set -o PIPE_FAIL


msg() {
  printf '%s\t%s\n' "$(env -- TZ=UTC date +%FT%TZ)" "${1}" >&2
}

die() {
  msg "${1}"
  exit 1
}

read-token() {
  {
    OP_TOKEN="$(
      /usr/bin/security find-generic-password \
        -s "${OP_TOKEN_KEYCHAIN_RECORD_SERVICE}" \
        -a "${OP_TOKEN_KEYCHAIN_RECORD_ACCOUNT}" \
        -w \
        -- \
        ${OP_TOKEN_KEYCHAIN_PATH+"${OP_TOKEN_KEYCHAIN_PATH}"}
    )"
    STATUS="${?}"
  } || true
}


if [[ -v OP_SERVICE_ACCOUNT_TOKEN ]]; then
  exec -- env -- OP_SERVICE_ACCOUNT_TOKEN="${OP_SERVICE_ACCOUNT_TOKEN}" "${@}"
fi

OP_TOKEN_KEYCHAIN_RECORD_SERVICE="${OP_TOKEN_KEYCHAIN_RECORD_SERVICE-"1password"}"
OP_TOKEN_KEYCHAIN_RECORD_ACCOUNT="${OP_TOKEN_KEYCHAIN_RECORD_ACCOUNT-"nidoking"}"

#     keychain locked + headless session
#   ⇒ user interaction is not allowed
#   ⇒ STATUS = -25308 & ((1 << 8) - 1) = 36
#
# https://github.com/apple-open-source/macos/blob/14.4/Security/base/SecBase.h#L355
#
#   errSecInteractionNotAllowed = -25308,  /* User interaction is not allowed. */
#
# https://pubs.opengroup.org/onlinepubs/9699919799/functions/_exit.html
#
#   The value of `status` may be [any value], though only the least significant 8 bits (that is,
#   `status & 0377`) shall be available from `wait()` and `waitpid()`; the full value shall be
#   available from `waitid()` and in the `siginfo_t` passed to a signal handler for `SIGCHLD`.
#
# https://unix.stackexchange.com/a/99134
#
#   Bourne-like shells also make the exit status of the last run command in their own `$?` special
#   parameter. However, it does not contain directly the number returned by `waitpid()`, but a
#   transformation on it, and it's different between shells.
#
#   What's common between all shells is that `$?` contains the lowest 8 bits of the exit code (the
#   number passed to `exit()`) if the process terminated normally.
read-token
if [[ "${STATUS}" -eq 36 ]]; then
  msg "Keychain locked: ${OP_TOKEN_KEYCHAIN_PATH-"default"}"
  # If stdin is associated with a terminal device, try to unlock keychain and read token again.
  if [[ -t 0 ]]; then
    msg "Unlocking keychain: ${OP_TOKEN_KEYCHAIN_PATH-"default"}"
    /usr/bin/security unlock-keychain -- ${OP_TOKEN_KEYCHAIN_PATH+"${OP_TOKEN_KEYCHAIN_PATH}"}
    read-token
  fi
fi
if [[ "${STATUS}" -ne 0 ]]; then
  die 'Unable to read 1Password service account token.'
fi

exec -- env -- OP_SERVICE_ACCOUNT_TOKEN="${OP_TOKEN}" "${@}"
